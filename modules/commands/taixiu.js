const fs = require("fs");
const path = __dirname + "/cache/taixiu.json";

let gameData = fs.existsSync(path) ? JSON.parse(fs.readFileSync(path)) : {};
let countdowns = {};

function save() {
  fs.writeFileSync(path, JSON.stringify(gameData, null, 2));
}

module.exports.config = {
  name: "taixiu",
  version: "1.2",
  hasPermssion: 0,
  credits: "Dat Thanh",
  description: "Ch∆°i t√†i x·ªâu theo l·ªánh join",
  commandCategory: "game",
  usages: "[create | join t√†i/x·ªâu <ti·ªÅn> | x·ªï | list]",
  cooldowns: 3,
};

module.exports.run = async function({ api, event, args, Users }) {
  const { threadID, senderID } = event;
  const [subcmd, ...rest] = args;

  if (subcmd === "create") {
    if (gameData[threadID]?.inGame)
      return api.sendMessage("ƒê√£ c√≥ b√†n ƒëang ho·∫°t ƒë·ªông trong nh√≥m n√†y.", threadID);

    const name = await Users.getNameUser(senderID);
    gameData[threadID] = {
      host: senderID,
      players: {
        [senderID]: { name }
      },
      inGame: true,
      history: gameData[threadID]?.history || []
    };
    save();
    return api.sendMessage(`${name} ƒë√£ t·∫°o b√†n t√†i x·ªâu. D√πng /taixiu join t√†i|x·ªâu <ti·ªÅn> ƒë·ªÉ v√†o c∆∞·ª£c.`, threadID);
  }

  if (subcmd === "join") {
    if (!gameData[threadID]?.inGame)
      return api.sendMessage("Ch∆∞a c√≥ b√†n n√†o ƒëang m·ªü!", threadID);

    const choice = rest[0]?.toLowerCase();
    const moneyArg = rest[1];
    if (!["t√†i", "x·ªâu"].includes(choice))
      return api.sendMessage("Vui l√≤ng ch·ªçn 't√†i' ho·∫∑c 'x·ªâu' sau join.", threadID);

    const bet = parseInt(moneyArg);
    if (isNaN(bet) || bet <= 0) return api.sendMessage("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!", threadID);

    const userMoney = await Users.getMoney(senderID);
    if (bet > userMoney) return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c!", threadID);

    const name = await Users.getNameUser(senderID);
    await Users.decreaseMoney(senderID, bet);

    gameData[threadID].players[senderID] = {
      name,
      bet: { choice, amount: bet }
    };
    save();

    api.sendMessage(`${name} ƒë√£ c∆∞·ª£c ${bet}$ v√†o ${choice.toUpperCase()}.`, threadID);

    const numBets = Object.values(gameData[threadID].players).filter(p => p.bet).length;
    if (numBets >= 2 && !countdowns[threadID]) {
      countdowns[threadID] = setTimeout(() => autoXo(threadID, api, Users), 60000);
      api.sendMessage("ƒê√£ c√≥ >=2 ng∆∞·ªùi c∆∞·ª£c. T·ª± ƒë·ªông x·ªï sau 60 gi√¢y...", threadID);
    }
    return;
  }

  if (subcmd === "x·ªï") {
    if (!gameData[threadID]?.inGame)
      return api.sendMessage("Kh√¥ng c√≥ b√†n n√†o ƒëang m·ªü!", threadID);
    if (gameData[threadID].host !== senderID)
      return api.sendMessage("Ch·ªâ ch·ªß b√†n m·ªõi c√≥ th·ªÉ x·ªï!", threadID);

    if (countdowns[threadID]) {
      clearTimeout(countdowns[threadID]);
      delete countdowns[threadID];
    }
    return autoXo(threadID, api, Users);
  }

  if (subcmd === "list") {
    const history = gameData[threadID]?.history || [];
    if (!history.length)
      return api.sendMessage("Ch∆∞a c√≥ l·ªãch s·ª≠ ch∆°i n√†o.", threadID);

    const text = history.slice(-10).reverse().map((h, i) =>
      `${i + 1}. ${h.dice.join(', ')} = ${h.result.toUpperCase()}`
    ).join('\n');

    return api.sendMessage("L·ªãch s·ª≠ 10 v√°n g·∫ßn nh·∫•t:\n" + text, threadID);
  }

  return api.sendMessage("Sai c√∫ ph√°p. D√πng: /taixiu create | join t√†i/x·ªâu <ti·ªÅn> | x·ªï | list", threadID);
};

async function autoXo(threadID, api, Users) {
  const data = gameData[threadID];
  if (!data?.inGame) return;

  const dice = [1, 2, 3].map(() => Math.floor(Math.random() * 6) + 1);
  const total = dice.reduce((a, b) => a + b);
  const result = total >= 11 ? "t√†i" : "x·ªâu";
  let msg = `üé≤ K·∫øt qu·∫£: ${dice.join(", ")} = ${total} => ${result.toUpperCase()}\n\n`;

  for (const [uid, player] of Object.entries(data.players)) {
    const bet = player.bet;
    if (!bet) continue;

    if (bet.choice === result) {
      await Users.increaseMoney(uid, bet.amount * 2);
      msg += `‚úÖ ${player.name} th·∫Øng +${bet.amount}$\n`;
    } else {
      msg += `‚ùå ${player.name} thua -${bet.amount}$\n`;
    }
  }

  data.history.push({ dice, result });
  data.players = {};
  data.inGame = false;
  save();

  if (countdowns[threadID]) {
    clearTimeout(countdowns[threadID]);
    delete countdowns[threadID];
  }

  return api.sendMessage(msg, threadID);
}
