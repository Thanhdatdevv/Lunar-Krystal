// Module X·ªï S·ªë - Casino Nh√† Thanh
module.exports.config = {
  name: "xoso",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "Dat Thanh",
  description: "Ch∆°i x·ªï s·ªë c√πng b·∫°n b√®",
  commandCategory: "game",
  usages: "/xoso <mua|xosomoi|kiemtra>",
  cooldowns: 3
};

const lottery = {};

function generateTicket() {
  let ticket = [];
  for (let i = 0; i < 6; i++) {
    ticket.push(Math.floor(Math.random() * 10));  // T·∫°o s·ªë t·ª´ 0 ƒë·∫øn 9
  }
  return ticket.join('');
}

function checkTicket(ticket, winningNumber) {
  return ticket === winningNumber;
}

module.exports.run = async function ({ api, event, args, Currencies }) {
  const { threadID, messageID, senderID } = event;
  const type = args[0];

  if (!type) return api.sendMessage("[Casino Nh√† Thanh] H√£y d√πng l·ªánh: /xoso <mua|xosomoi|kiemtra>", threadID, messageID);

  if (!lottery[threadID]) lottery[threadID] = { tickets: [], winningNumber: null };

  switch (type) {
    case "mua": {
      const bet = parseInt(args[1]);
      if (isNaN(bet) || bet <= 0) return api.sendMessage("H√£y nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c h·ª£p l·ªá.", threadID, messageID);
      
      const ticket = generateTicket();
      lottery[threadID].tickets.push({ senderID, ticket, bet });
      return api.sendMessage(`[Casino Nh√† Thanh] B·∫°n ƒë√£ mua v√© s·ªë v·ªõi s·ªë: ${ticket} v√† c∆∞·ª£c: ${bet} VNƒê. Ch√∫c b·∫°n may m·∫Øn!`, threadID, messageID);
    }

    case "xosomoi": {
      if (lottery[threadID].tickets.length === 0) return api.sendMessage("Ch∆∞a c√≥ ng∆∞·ªùi mua v√©. H√£y ƒë·ªÉ m·ªçi ng∆∞·ªùi mua v√© b·∫±ng l·ªánh /xoso mua <ti·ªÅn>.", threadID, messageID);

      // T·∫°o ra m·ªôt s·ªë tr√∫ng th∆∞·ªüng ng·∫´u nhi√™n
      const winningNumber = generateTicket();
      lottery[threadID].winningNumber = winningNumber;

      let winners = [];
      let totalPrize = 0;
      
      for (let ticket of lottery[threadID].tickets) {
        if (checkTicket(ticket.ticket, winningNumber)) {
          winners.push(ticket.senderID);
          totalPrize += ticket.bet;
        }
      }

      let resultMessage = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n       ‚ô†Ô∏è X·ªî S·ªê C√ôNG NH√Ä THANH ‚ô†Ô∏è\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
      resultMessage += `S·ªë tr√∫ng th∆∞·ªüng l√†: ${winningNumber}\n`;
      
      if (winners.length > 0) {
        resultMessage += "ü•á Nh·ªØng ng∆∞·ªùi th·∫Øng cu·ªôc:\n";
        for (let winner of winners) {
          resultMessage += `- UID ${winner}\n`;
        }
        resultMessage += `T·ªïng ti·ªÅn th∆∞·ªüng: ${totalPrize} VNƒê`;
      } else {
        resultMessage += "Kh√¥ng c√≥ ng∆∞·ªùi tr√∫ng th∆∞·ªüng l·∫ßn n√†y!";
      }

      // X√≥a th√¥ng tin x·ªï s·ªë sau khi k·∫øt th√∫c
      delete lottery[threadID];
      return api.sendMessage(resultMessage + "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", threadID, messageID);
    }

    case "kiemtra": {
      const ticket = args[1];
      if (!ticket) return api.sendMessage("H√£y nh·∫≠p s·ªë v√© c·ªßa b·∫°n ƒë·ªÉ ki·ªÉm tra!", threadID, messageID);

      let found = false;
      for (let entry of lottery[threadID].tickets) {
        if (entry.ticket === ticket && checkTicket(ticket, lottery[threadID].winningNumber)) {
          found = true;
          break;
        }
      }

      if (found) {
        return api.sendMessage(`Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng v·ªõi s·ªë v√© ${ticket}!\nS·ªë tr√∫ng th∆∞·ªüng l√†: ${lottery[threadID].winningNumber}`, threadID, messageID);
      } else {
        return api.sendMessage(`R·∫•t ti·∫øc, v√© s·ªë c·ªßa b·∫°n ${ticket} kh√¥ng tr√∫ng th∆∞·ªüng.\nS·ªë tr√∫ng th∆∞·ªüng l√†: ${lottery[threadID].winningNumber}`, threadID, messageID);
      }
    }

    default:
      return api.sendMessage("L·ªánh kh√¥ng h·ª£p l·ªá, h√£y d√πng /xoso <mua|xosomoi|kiemtra>", threadID, messageID);
  }
};
