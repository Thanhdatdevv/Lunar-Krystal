const fs = require("fs");
const axios = require("axios");
const path = require("path");
const soidataPath = path.join(__dirname, "soidata.json");

let SOI_STATUS = {};
let THU_DAI = {};

if (fs.existsSync(soidataPath)) {
  const data = JSON.parse(fs.readFileSync(soidataPath, "utf-8"));
  SOI_STATUS = data.SOI_STATUS || {};
  THU_DAI = data.THU_DAI || {};
}

module.exports.config = {
  name: "soi",
  version: "1.0.2",
  hasPermission: 0,
  credits: "Dat Thanh",
  description: "S√≥i h·ªón l√°o, ph·∫£n ·ª©ng khi b·ªã rep, nh·∫Øc t√™n ho·∫∑c b·ªã x√∫c ph·∫°m",
  commandCategory: "fun",
  usages: "[on | off]",
  cooldowns: 3,
  envConfig: {}
};

module.exports.run = async function ({ event, api, args }) {
  const { threadID, messageID } = event;
  const status = args[0];

  if (status === "on") {
    SOI_STATUS[threadID] = true;
    saveData();
    return api.sendMessage("S√≥i ƒë√£ b·∫≠t ch·∫ø ƒë·ªô h·ªón.", threadID, messageID);
  }

  if (status === "off") {
    SOI_STATUS[threadID] = false;
    saveData();
    return api.sendMessage("S√≥i ƒë√£ im mi·ªáng.", threadID, messageID);
  }

  return api.sendMessage("D√πng: /soi on | off", threadID, messageID);
};

module.exports.handleEvent = async function ({ event, api, Users }) {
  const { threadID, messageID, senderID, mentions, type, body, isGroup, replyToMessage } = event;

  const botID = api.getCurrentUserID();
  if (senderID == botID || !SOI_STATUS[threadID]) return;

  const name = (await Users.getNameUser(senderID)) || "m√†y";
  const isMentioned = mentions?.[botID];
  const isReplyToBot = replyToMessage?.senderID == botID;
  const isInsult = /s√≥i|√≥c|ƒë·∫ßn|ngu|ƒë·ªãt|lol|l·ªìn|x√†m|im|c√¢m/i.test(body);

  if (isMentioned || isReplyToBot || isInsult || THU_DAI[senderID]) {
    if (!THU_DAI[senderID]) THU_DAI[senderID] = 1;
    else THU_DAI[senderID] += 1;
    saveData();

    const prompt = buildPrompt(name, body, THU_DAI[senderID]);
    const reply = await callOpenAI(prompt);

    const emoji = ["üòè", "üñï", "ü§°", "üôÑ", "üí¢"][Math.floor(Math.random() * 5)];
    api.sendMessage({ body: reply, mentions: [{ id: senderID, tag: name }] }, threadID, messageID);
    api.setMessageReaction(emoji, messageID, () => {}, true);

    // G√°n bi·ªát danh n·∫øu ch∆∞a c√≥
    api.getThreadInfo(threadID, (err, info) => {
      if (!err) {
        const found = info.nicknames[senderID];
        if (!found || !found.includes("ƒê·∫ßn")) {
          api.changeNickname(`ƒê·∫ßn ${name}`, threadID, senderID);
        }
      }
    });
  }
};

function buildPrompt(name, message, rank) {
  const level = rank >= 5 ? "C·ª´u th√π truy·ªÅn ki·∫øp" : rank >= 3 ? "G·∫Øt g·ªèng" : "H∆°i cay";
  return `M√†y l√† con s√≥i AI c·ª±c k·ª≥ h·ªón l√°o. M·ªói khi c√≥ ng∆∞·ªùi n√≥i ƒë·∫øn m√†y, m√†y s·∫Ω ch·ª≠i l·∫°i m·ªôt c√°ch khinh b·ªâ, h√†i h∆∞·ªõc v√† kh√¥ng qu√° t·ª•c tƒ©u. Ng∆∞·ªùi ƒëang b·ªã m√†y ch·ª≠i t√™n l√† ${name}, ƒë√£ x√∫c ph·∫°m m√†y c·∫•p ƒë·ªô: ${level}. Tin nh·∫Øn: "${message}". H√£y tr·∫£ l·ªùi l·∫°i b·∫±ng m·ªôt c√¢u ch·ª≠i ng·∫Øn g·ªçn, cay ƒë·ªôc v√† c√≥ ch√∫t m·ªâa mai.`;
}

async function callOpenAI(prompt) {
  try {
    const res = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 100,
        temperature: 0.8
      },
      {
        headers: {
          Authorization: "Bearer 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",
          "Content-Type": "application/json"
        }
      }
    );
    return res.data.choices[0].message.content.trim();
  } catch (e) {
    return "M·∫°ng lag √†? Ch·ª≠i kh√¥ng n·ªïi lu√¥n!";
  }
}

function saveData() {
  fs.writeFileSync(soidataPath, JSON.stringify({ SOI_STATUS, THU_DAI }, null, 2));
}
