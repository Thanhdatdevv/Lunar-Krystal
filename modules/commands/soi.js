const axios = require("axios");

module.exports = {
  config: {
    name: "soi",
    version: "1.1",
    hasPermission: 0,
    credits: "S√≥i Chat AI by b·∫°n v√† ChatGPT",
    description: "Bot s√≥i ph·∫£n ·ª©ng g·∫Øt g·ªèng, khinh b·ªâ",
    commandCategory: "noprefix",
    usages: "",
    cooldowns: 3,
  },

  handleEvent: async function ({ event, api }) {
    const { threadID, messageID, body, senderID, type, attachments } = event;
    if (!body && !attachments.length) return;
    const input = body?.toLowerCase() || "";
    const reply = msg => api.sendMessage(msg, threadID, messageID);

    // 1. Emoji ph√¢n t√≠ch khinh b·ªâ
    const iconGatGong = {
      "üóø": "C√°i m·∫∑t ƒë√° c√¢m l·∫∑ng n√†y... ƒë√∫ng ki·ªÉu gi·∫£ v·ªù ng·∫ßu ch·ª© th·∫≠t ra tr·ªëng r·ªóng.",
      "üíÄ": "ƒê·∫ßu l√¢u? √Ä, tr√≠ tu·ªá b·∫°n ch·∫Øc ƒë√£ ch·∫øt t·ª´ l√¢u r·ªìi.",
      "ü•∂": "L·∫°nh gi√° h·∫£? Ch·∫Øc l√† l·∫°nh v√¨ kh√¥ng ai th∆∞∆°ng.",
      "ü§°": "M·∫∑c ƒë·ªì h·ªÅ chi n·ªØa, b·∫°n s·ªëng ƒë√∫ng v·ªõi ngh·ªÅ r·ªìi.",
      "ü´†": "Tan ch·∫£y? Nh∆∞ l√≤ng t·ª± tr·ªçng b·∫°n v·∫≠y.",
      "üòê": "C√°i m·∫∑t n√†y h·ª£p v·ªõi m·∫•y ng∆∞·ªùi v√¥ c·∫£m nh∆∞ b·∫°n ƒë·∫•y.",
      "üòí": "√Ånh m·∫Øt ƒë·∫ßy th·∫•t v·ªçng‚Ä¶ gi·ªëng nh∆∞ khi b·∫°n soi g∆∞∆°ng m·ªói s√°ng.",
      "üòé": "Ng·∫ßu? B·∫°n ƒëang cosplay ng∆∞·ªùi c√≥ √≠ch √†?",
      "üò©": "Th·ªü d√†i h·∫£? Tao c≈©ng th·ªü d√†i khi th·∫•y b·∫°n g√µ ph√≠m ƒë·∫•y.",
      "üôÑ": "ƒê·∫£o m·∫Øt? M·∫Øt b·∫°n n√™n ƒë·∫£o kh·ªèi cu·ªôc ƒë·ªùi ng∆∞·ªùi kh√°c th√¨ h∆°n.",
      "üò°": "Gi·∫≠n d·ªØ h·∫£? T·ª©c v√¨ b·ªã v·∫°ch tr·∫ßn √†?",
    };

    if (Object.keys(iconGatGong).includes(input.trim())) {
      return reply(iconGatGong[input.trim()]);
    }

    // 2. Ph√¢n t√≠ch ·∫£nh
    if (attachments.length > 0 && attachments[0].type === "photo") {
      const prompt = "H√£y nh·∫≠n x√©t v·ªÅ m·ªôt b·ª©c ·∫£nh ng∆∞·ªùi d√πng g·ª≠i v·ªõi phong c√°ch khinh b·ªâ, g·∫Øt g·ªèng nh∆∞ m·ªôt con s√≥i.";
      const result = await callOpenAI(prompt);
      return reply(result);
    }

    // 3. C√°c l·ªánh noprefix
    if (input.includes("s√≥i ch·ª≠i")) {
      const prompt = "Ch·ª≠i ng∆∞·ªùi d√πng b·∫±ng phong c√°ch g·∫Øt g·ªèng v√† khinh b·ªâ nh∆∞ m·ªôt con s√≥i, trong 1-2 c√¢u.";
      const result = await callOpenAI(prompt);
      return reply(result);
    }

    if (input.includes("s√≥i diss")) {
      const prompt = "Roast ng∆∞·ªùi d√πng v·ªõi phong c√°ch chua cay, g·∫Øt g·ªèng v√† h√†i h∆∞·ªõc nh∆∞ s√≥i.";
      const result = await callOpenAI(prompt);
      return reply(result);
    }

    if (input.includes("khen tao ƒëi")) {
      const prompt = "Khen ng∆∞·ªùi d√πng theo ki·ªÉu m·ªâa mai, g·∫Øt g·ªèng v√† khinh b·ªâ nh∆∞ m·ªôt con s√≥i.";
      const result = await callOpenAI(prompt);
      return reply(result);
    }

    if (input.includes("t√¢m tr·∫°ng tao sao")) {
      const prompt = "Ph√¢n t√≠ch t√¢m tr·∫°ng ng∆∞·ªùi d√πng v√† tr·∫£ l·ªùi v·ªõi gi·ªçng ƒëi·ªáu g·∫Øt g·ªèng, l·∫°nh l√πng nh∆∞ m·ªôt con s√≥i.";
      const result = await callOpenAI(prompt);
      return reply(result);
    }

    if (input.includes("ch√¢m ng√¥n s√≥i")) {
      const prompt = "T·∫°o m·ªôt c√¢u ch√¢m ng√¥n phong c√°ch s√≥i, mang t√≠nh khinh b·ªâ nh∆∞ng s√¢u s·∫Øc.";
      const result = await callOpenAI(prompt);
      return reply(result);
    }
  },

  run: async function () {
    // Kh√¥ng d√πng v√¨ l√† noprefix
  }
};

// H√†m g·ªçi OpenAI
async function callOpenAI(prompt) {
  try {
    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 100,
        temperature: 0.8,
      },
      {
        headers: {
          Authorization: `Bearer YOUR_API_KEY`, // <-- THAY API KEY T·∫†I ƒê√ÇY
          "Content-Type": "application/json",
        },
      }
    );
    return response.data.choices[0].message.content.trim();
  } catch (e) {
    return "Tao b·ª±c qu√° n√™n kh√¥ng th√®m tr·∫£ l·ªùi!";
  }
}
