// Module Xì Dách - Casino Nhà Thanh 
module.exports.config = { name: "xidach", version: "1.0.0", hasPermssion: 0, credits: "Dat Thanh", description: "Chơi xì dách cùng bạn bè", commandCategory: "game", usages: "/xidach <create|join|rút|dằn|xổ>", cooldowns: 10 };

const games = {}; const suits = ['♠️', '♥️', '♦️', '♣️']; const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];

function createDeck() { let deck = []; for (let suit of suits) { for (let value of values) { deck.push({ suit, value }); } } return shuffle(deck); }

function shuffle(array) { for (let i = array.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [array[i], array[j]] = [array[j], array[i]]; } return array; }

function calculatePoints(hand) { let points = 0; let aceCount = 0; for (let card of hand) { if (card.value === 'A') { aceCount++; points += 11; } else if (['K', 'Q', 'J'].includes(card.value)) { points += 10; } else { points += parseInt(card.value); } } while (points > 21 && aceCount > 0) { points -= 10; aceCount--; } return points; }

module.exports.run = async function({ api, event, args, Currencies }) { const { threadID, messageID, senderID } = event; const type = args[0]; if (!type) return api.sendMessage("[Casino Nhà Thanh] Hãy dùng lệnh: /xidach <create|join|rút|dằn|xổ>", threadID, messageID);

if (!games[threadID]) games[threadID] = null;

switch (type) { case "create": { if (games[threadID]) return api.sendMessage("Đã có bàn đang chơi, hãy /xidach join!", threadID, messageID); const bet = parseInt(args[1]); if (isNaN(bet) || bet <= 0) return api.sendMessage("Hãy nhập số tiền cược hợp lệ.", threadID, messageID); games[threadID] = { deck: createDeck(), bet, players: { [senderID]: { hand: [], status: 'playing' } }, started: true }; games[threadID].players[senderID].hand.push(games[threadID].deck.pop()); games[threadID].players[senderID].hand.push(games[threadID].deck.pop()); return api.sendMessage("[♠️ Casino Nhà Thanh ♠️]\nBạn đã tạo bàn Xì Dách với cược: " + bet + "\nGõ /xidach join để tham gia!", threadID); } case "join": { const game = games[threadID]; if (!game) return api.sendMessage("Chưa có bàn nào, hãy tạo bằng /xidach create <tiền>.", threadID, messageID); if (game.players[senderID]) return api.sendMessage("Bạn đã tham gia bàn này rồi.", threadID, messageID); game.players[senderID] = { hand: [], status: 'playing' }; game.players[senderID].hand.push(game.deck.pop()); game.players[senderID].hand.push(game.deck.pop()); return api.sendMessage("Tham gia bàn chơi thành công! Gõ /xidach rút hoặc /xidach dằn.", threadID); } case "rút": { const game = games[threadID]; if (!game || !game.players[senderID]) return api.sendMessage("Bạn chưa tham gia bàn chơi nào.", threadID); if (game.players[senderID].status !== 'playing') return api.sendMessage("Bạn đã dằn rồi.", threadID); game.players[senderID].hand.push(game.deck.pop()); return api.sendMessage("Rút thêm bài thành công.", threadID); } case "dằn": { const game = games[threadID]; if (!game || !game.players[senderID]) return api.sendMessage("Bạn chưa tham gia bàn chơi nào.", threadID); game.players[senderID].status = 'stand'; return api.sendMessage("Bạn đã dằn bài.", threadID); } case "xổ": { const game = games[threadID]; if (!game) return api.sendMessage("Chưa có bàn chơi nào.", threadID); const results = []; let winner = null; let max = 0; for (let uid in game.players) { const p = game.players[uid]; const point = calculatePoints(p.hand); results.push({ uid, point }); if (point <= 21 && point > max) { max = point; winner = uid; } } let msg = "━━━━━━━━━━━━━━━\n       ♠️ XỔ XÌ DÁCH ♠️\n━━━━━━━━━━━━━━━\n"; for (let r of results) { msg += • UID ${r.uid}: ${r.point} điểm\n; } if (winner) { msg += \n🥇 Người thắng: ${winner} (${max} điểm)\n+${game.bet * (Object.keys(game.players).length - 1)} VNĐ; } else { msg += "\nKhông ai thắng vì đều quá 21 điểm!"; } delete games[threadID]; return api.sendMessage(msg + "\n━━━━━━━━━━━━━━━", threadID); } default: return api.sendMessage("Lệnh không hợp lệ, hãy dùng /xidach <create|join|rút|dằn|xổ>", threadID); } };

